{"version":3,"sources":["components/GameShell/Models.ts","components/GameShell/Worm.ts","components/GameShell/Snack.ts","components/GameShell/Canvas.ts","components/GameShell/Game.tsx","components/GameShell/GameShell.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Keys","Position","posX","posY","positionsEqual","right","ColoredDot","color","Worm","_headPosition","_size","_direction","DOWN","_step","body","dead","this","push","headPosition","value","size","direction","UP","LEFT","RIGHT","console","log","worms","anotherWorm","approachedAnotherWorm","increaseSize","find","x","some","y","positionBlockedVertically","length","shift","key","mostLeftPosition","sort","a","b","filter","mostRightPosition","Snack","occupiedPosition","canvas","newSnackPosition","getRandomPosition","Canvas","width","height","_blockSize","ctx","Math","floor","random","canvasSizeInBlocks","position","dots","clearRect","index","dot","fillStyle","fillRect","Game","canvasSizeinPx","fps","blockSize","wormsNumber","snacksNumber","intervalId","tick","snacks","survivorMode","extraDots","initSnacks","newRandomly","flatMap","setInterval","run","clearInterval","forEach","worm","possibleDirections","window","possibleMove","leftPositions","rightPositions","move","splice","draw","stop","element","sI","snack","newPosition","nextPosition","checkNextMove","checkSnack","checkAnotherWorm","Object","values","includes","outOfCanvas","checkHimself","GameShell","props","canvasRef","React","createRef","state","current","getContext","game","canvasSize","start","addEventListener","event","handleKey","keyCode","ref","style","border","Component","App","canvasWidth","innerWidth","canvasHeight","innerHeight","className","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b96bf76b.chunk.js","sourcesContent":["export class Position {\r\n  constructor(public posX: number, public posY: number) {}\r\n\r\n  public positionsEqual = (right: Position): boolean => {\r\n    return this.posX === right.posX && this.posY === right.posY;\r\n  };\r\n}\r\n\r\nexport enum Keys {\r\n  LEFT = 37,\r\n  UP = 38,\r\n  RIGHT = 39,\r\n  DOWN = 40\r\n}\r\n\r\nexport interface ISize {\r\n  width: number;\r\n  height: number;\r\n}\r\n\r\nexport class ColoredDot extends Position {\r\n  constructor(posX: number, posY: number, public color: string) {\r\n    super(posX, posY);\r\n  }\r\n}\r\n","import { Position, Keys } from './Models';\r\n\r\nexport class Worm {\r\n  public get headPosition(): Position {\r\n    return this._headPosition;\r\n  }\r\n\r\n  public set headPosition(value: Position) {\r\n    if (this.body.length >= this.size) {\r\n      this.body.shift();\r\n    }\r\n    this.body.push(value);\r\n    this._headPosition = value;\r\n  }\r\n\r\n  public body: Position[] = [];\r\n\r\n  public increaseSize(value: number = 1): void {\r\n    this._size = this.size + value;\r\n  }\r\n\r\n  public dead = false;\r\n\r\n  public get size(): number {\r\n    return this._size;\r\n  }\r\n\r\n  public get direction(): Keys {\r\n    return this._direction;\r\n  }\r\n\r\n  public set direction(key: Keys) {\r\n    const wrongDirection =\r\n      (this._direction === Keys.DOWN && key === Keys.UP) ||\r\n      (this._direction === Keys.UP && key === Keys.DOWN) ||\r\n      (this._direction === Keys.LEFT && key === Keys.RIGHT) ||\r\n      (this._direction === Keys.RIGHT && key === Keys.LEFT);\r\n\r\n    if (!wrongDirection) {\r\n      this._direction = key;\r\n    }\r\n  }\r\n\r\n  public nextPosition(direction: Keys): Position {\r\n    switch (direction) {\r\n      case Keys.UP:\r\n        return new Position(this.headPosition.posX, this.headPosition.posY - this._step);\r\n      case Keys.DOWN:\r\n        return new Position(this.headPosition.posX, this.headPosition.posY + this._step);\r\n      case Keys.LEFT:\r\n        return new Position(this.headPosition.posX - this._step, this.headPosition.posY);\r\n      case Keys.RIGHT:\r\n        return new Position(this.headPosition.posX + this._step, this.headPosition.posY);\r\n      default:\r\n        console.log(\"no action handler for key: \", direction);\r\n        return this.headPosition;\r\n    }\r\n  }\r\n\r\n  public checkAnotherWorm(headPosition: Position, worms: Worm[]): void {\r\n    const anotherWorm = this.approachedAnotherWorm(worms, headPosition);\r\n    if (anotherWorm) {\r\n      anotherWorm.dead = true;\r\n      this.increaseSize(anotherWorm.size);\r\n    }\r\n  }\r\n\r\n  public approachedAnotherWorm(worms: Worm[], headPosition: Position): Worm | undefined {\r\n    return worms.find(\r\n      x =>\r\n        !x.headPosition.positionsEqual(headPosition) && !x.dead && x.body.some(y => y.positionsEqual(headPosition))\r\n    );\r\n  }\r\n\r\n  public checkHimself(headPosition: Position): boolean {\r\n    const positionBlockedVertically = this.body.some(x => x.positionsEqual(new Position(\r\n      headPosition.posX,\r\n      headPosition.posY - 1\r\n    ))) && this.body.some(x => x.positionsEqual(new Position(\r\n      headPosition.posX,\r\n      headPosition.posY + 1\r\n    )));\r\n    const positionBlockedHorizontally = this.body.some(x => x.positionsEqual(new Position(\r\n      headPosition.posX - 1,\r\n      headPosition.posY\r\n    ))) && this.body.some(x => x.positionsEqual(new Position(\r\n      headPosition.posX + 1,\r\n      headPosition.posY\r\n    )));\r\n    const approachedDeadEnd = positionBlockedHorizontally || positionBlockedVertically;\r\n    return approachedDeadEnd || this.body.some(x => x.positionsEqual(headPosition));\r\n  }\r\n\r\n  public get leftPositions(): Position[] {\r\n    const mostLeftPosition = this.body.sort((a, b) => a.posX - b.posX)[0];\r\n    return this.body.filter(x => x.posX === mostLeftPosition.posX);\r\n  }\r\n\r\n  public get rightPositions(): Position[] {\r\n    const mostRightPosition = this.body.sort((a, b) => b.posX - a.posX)[0];\r\n    return this.body.filter(x => x.posX === mostRightPosition.posX);\r\n  }\r\n\r\n  constructor(\r\n    private _headPosition: Position = new Position(0, 0),\r\n    private _size: number = 3,\r\n    private _direction: Keys = Keys.DOWN,\r\n    private _step: number = 1\r\n  ) {\r\n    this.body.push(this.headPosition);\r\n  }\r\n}\r\n","import { Position } from './Models';\r\nimport { Canvas } from './Canvas';\r\n\r\nexport class Snack extends Position {\r\n  public static newRandomly(occupiedPosition: Position[], canvas: Canvas): Snack {\r\n    let newSnackPosition = canvas.getRandomPosition();\r\n    while (occupiedPosition.some(y => y.positionsEqual(newSnackPosition))) {\r\n      newSnackPosition = canvas.getRandomPosition();\r\n    }\r\n    const { posX, posY } = newSnackPosition;\r\n    return new this(posX, posY);\r\n  }\r\n}\r\n","import { ISize, Position, ColoredDot } from \"./Models\";\r\n\r\nexport class Canvas {\r\n  private size: ISize = { width: 0, height: 0 };\r\n\r\n  constructor(width: number, height: number, private _blockSize: number = 1, private ctx: CanvasRenderingContext2D) {\r\n    this.size = { width, height };\r\n  }\r\n\r\n  public getRandomPosition(): Position {\r\n    return new Position(\r\n      Math.floor(Math.random() * this.canvasSizeInBlocks.width),\r\n      Math.floor(Math.random() * this.canvasSizeInBlocks.height)\r\n    );\r\n  }\r\n\r\n  public get canvasSizeInBlocks(): ISize {\r\n    return { width: this.size.width / this._blockSize, height: this.size.height / this._blockSize };\r\n  }\r\n\r\n  public outOfCanvas(position: Position): boolean {\r\n    return (\r\n      this.canvasSizeInBlocks.height < position.posY ||\r\n      position.posY < 0 ||\r\n      this.canvasSizeInBlocks.width < position.posX ||\r\n      position.posX < 0\r\n    );\r\n  }\r\n\r\n  public draw(dots: ColoredDot[]): void {\r\n    this.ctx.clearRect(0, 0, this.size.width, this.size.height);\r\n    for (let index = 0; index < dots.length; index++) {\r\n      const dot = dots[index];\r\n      this.ctx.fillStyle = dot.color;\r\n      this.ctx.fillRect(dot.posX * this._blockSize, dot.posY * this._blockSize, this._blockSize, this._blockSize);\r\n    }\r\n  }\r\n}\r\n","import { Keys, Position, ISize, ColoredDot } from \"./Models\";\r\nimport { Worm } from \"./Worm\";\r\nimport { Snack } from \"./Snack\";\r\nimport { Canvas } from \"./Canvas\";\r\n\r\nexport class Game {\r\n  private intervalId?: NodeJS.Timeout;\r\n  private tick = 0;\r\n  private snacks: Snack[] = [];\r\n  private worms: Worm[] = [];\r\n  private survivorMode = false;\r\n  private canvas: Canvas;\r\n\r\n  private extraDots: Position[] = [];\r\n\r\n  constructor(\r\n    ctx: CanvasRenderingContext2D,\r\n    canvasSizeinPx: ISize,\r\n    private fps = 50,\r\n    private blockSize = 100,\r\n    wormsNumber = 1,\r\n    snacksNumber = 1\r\n  ) {\r\n    this.canvas = new Canvas(canvasSizeinPx.width, canvasSizeinPx.height, this.blockSize, ctx);\r\n    for (let index = 0; index < wormsNumber; index++) {\r\n      this.worms.push(new Worm(this.canvas.getRandomPosition()));\r\n    }\r\n    this.initSnacks(snacksNumber);\r\n    this.survivorMode = wormsNumber > 1;\r\n  }\r\n\r\n  private initSnacks(snacksNumber: number): void {\r\n    for (let index = 0; index < snacksNumber; index++) {\r\n      this.snacks.push(Snack.newRandomly(this.worms.flatMap(x => x.body), this.canvas));\r\n    }\r\n  }\r\n\r\n  public start(random: boolean = false): void {\r\n    this.intervalId = setInterval(() => {\r\n      this.run(random);\r\n    }, 1000 / this.fps);\r\n  }\r\n\r\n  public stop(): void {\r\n    if (this.intervalId) {\r\n      clearInterval(this.intervalId);\r\n    }\r\n  }\r\n\r\n  private run(random: boolean): void {\r\n    this.tick++;\r\n    this.worms\r\n      .filter(x => !x.dead)\r\n      .forEach(worm => {\r\n        if (random) {\r\n          const possibleDirections: number[] = [Keys.DOWN, Keys.LEFT, Keys.RIGHT, Keys.UP];\r\n          (window as any).worm = worm;\r\n          let possibleMove = false;\r\n          let key: Keys = Keys.DOWN;\r\n          do {\r\n            if (possibleDirections.length === 0) {\r\n              worm.dead = true;\r\n              possibleMove = true;\r\n              this.extraDots.push(...worm.leftPositions);\r\n              this.extraDots.push(...worm.rightPositions);\r\n            } else {\r\n              const index = Math.floor(Math.random() * possibleDirections.length);\r\n              key = possibleDirections[index];\r\n              possibleMove = this.move(worm, key);\r\n              possibleDirections.splice(index, 1);\r\n            }\r\n          } while (!possibleMove); \r\n          worm.direction = key;\r\n        }\r\n      });\r\n    this.draw();\r\n    if (this.survivorMode && this.worms.filter(x => !x.dead).length <= 1) {\r\n      this.stop();\r\n    }\r\n  }\r\n\r\n  private draw(): void {\r\n    const dots: ColoredDot[] = [];\r\n    this.worms\r\n      .filter(x => !x.dead)\r\n      .forEach(worm => {\r\n        for (let index = 0; index < worm.body.length; index++) {\r\n          const element = worm.body[index];\r\n          const color = index === worm.body.length - 1 ? \"red\" : worm.dead ? \"burlywood\" : \"black\";\r\n          dots.push(new ColoredDot(element.posX, element.posY, color));\r\n        }\r\n      });\r\n    for (let sI = 0; sI < this.snacks.length; sI++) {\r\n      const snack = this.snacks[sI];\r\n      const color = \"green\";\r\n      dots.push(new ColoredDot(snack.posX, snack.posY, color));\r\n    }\r\n    this.canvas.draw(dots);\r\n  }\r\n\r\n  private checkSnack(worm: Worm, index: number, headPosition: Position): void {\r\n    const wormApproachedSnack = this.snacks[index].positionsEqual(headPosition);\r\n    if (wormApproachedSnack) {\r\n      worm.increaseSize();\r\n      this.snacks[index] = Snack.newRandomly(this.worms.flatMap(x => x.body), this.canvas);\r\n    }\r\n  }\r\n\r\n  private move(worm: Worm, direction: Keys): boolean {\r\n    const newPosition = worm.nextPosition(direction);\r\n    const possibleMove = this.checkNextMove(newPosition, worm);\r\n    if (possibleMove) {\r\n      for (let index = 0; index < this.snacks.length; index++) {\r\n        this.checkSnack(worm, index, newPosition);\r\n      }\r\n      worm.checkAnotherWorm(newPosition, this.worms);\r\n      worm.headPosition = newPosition;\r\n      return possibleMove;\r\n    }\r\n    return possibleMove;\r\n  }\r\n\r\n  public handleKey(key: Keys): void {\r\n    if (!Object.values(Keys).includes(key)) {\r\n      return;\r\n    }\r\n    this.worms[0].direction = key;\r\n  }\r\n\r\n  private checkNextMove(headPosition: Position, worm: Worm): boolean {\r\n    if (this.canvas.outOfCanvas(headPosition)) {\r\n      return false;\r\n    }\r\n    const wormApproachedHimself = worm.checkHimself(headPosition);\r\n    if (wormApproachedHimself) {\r\n      return false;\r\n    }\r\n    const anotherWorm = worm.approachedAnotherWorm(this.worms, headPosition);\r\n    if (anotherWorm) {\r\n      return anotherWorm.size <= worm.size;\r\n    }\r\n    return true;\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { Game } from \"./Game\";\r\nimport { ISize } from \"./Models\";\r\n\r\ninterface GameShellProps {\r\n  canvasSize: ISize;\r\n}\r\n\r\nexport default class GameShell extends React.Component<\r\n  GameShellProps,\r\n  { tick: number }\r\n> {\r\n  private canvasRef: React.RefObject<HTMLCanvasElement>;\r\n\r\n  constructor(props: GameShellProps) {\r\n    super(props);\r\n    this.canvasRef = React.createRef();\r\n\r\n    this.state = {\r\n      tick: 0\r\n    };\r\n  }\r\n\r\n  componentDidMount(): void {\r\n    const canvas = this.canvasRef.current as HTMLCanvasElement;\r\n    const ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\r\n    ctx.fillStyle = \"green\";\r\n    const game = new Game(ctx, this.props.canvasSize, 50, 3, 100, 100);\r\n    game.start(true);\r\n    window.addEventListener(\"keydown\", (event: KeyboardEvent) =>\r\n      game.handleKey(event.keyCode)\r\n    );\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    return (\r\n      <canvas\r\n        ref={this.canvasRef}\r\n        width={this.props.canvasSize.width}\r\n        height={this.props.canvasSize.height}\r\n        style={{ border: \"1px solid\" }}\r\n      />\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport GameShell from './components/GameShell/GameShell';\n\nconst App: React.FC = () => {\n  const canvasWidth = window.innerWidth - 10;\n  const canvasHeight = window.innerHeight - 10;\n  return (\n    <div className=\"App\">\n        <GameShell canvasSize={{ width: canvasWidth, height: canvasHeight }}></GameShell>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}