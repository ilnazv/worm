{"version":3,"sources":["components/GameShell/Models.ts","components/GameShell/Game.tsx","components/GameShell/GameShell.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Keys","Position","posX","posY","positionsEqual","right","Worm","_headPosition","_size","_direction","DOWN","_step","body","dead","this","push","headPosition","value","size","direction","UP","LEFT","RIGHT","console","log","worms","anotherWorm","find","x","some","y","increaseSize","length","shift","key","ColoredDot","color","Canvas","width","height","_blockSize","ctx","Math","floor","random","canvasSizeInBlocks","position","dots","clearRect","index","dot","fillStyle","fillRect","Snack","occupiedPosition","canvas","newSnackPosition","getRandomPosition","Game","canvasSizeinPx","fps","blockSize","wormsNumber","snacksNumber","intervalId","tick","snacks","survivorMode","initSnacks","newRandomly","flatMap","setInterval","run","clearInterval","filter","forEach","worm","possibleDirections","window","possibleMove","move","splice","draw","stop","element","sI","snack","newPosition","nextPosition","checkNextMove","checkSnack","checkAnotherWorm","Object","values","includes","outOfCanvas","GameShell","props","canvasRef","React","createRef","state","current","getContext","game","canvasSize","start","addEventListener","event","handleKey","keyCode","ref","style","border","Component","App","canvasWidth","innerWidth","canvasHeight","innerHeight","className","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d10a3fc3.chunk.js","sourcesContent":["export class Position {\r\n  constructor(public posX: number, public posY: number) {}\r\n\r\n  public positionsEqual = (right: Position): boolean => {\r\n    return this.posX === right.posX && this.posY === right.posY;\r\n  };\r\n}\r\n\r\nexport enum Keys {\r\n  LEFT = 37,\r\n  UP = 38,\r\n  RIGHT = 39,\r\n  DOWN = 40\r\n}\r\n\r\nexport class Worm {\r\n  public get headPosition(): Position {\r\n    return this._headPosition;\r\n  }\r\n\r\n  public set headPosition(value: Position) {\r\n    if (this.body.length >= this.size) {\r\n      this.body.shift();\r\n    }\r\n    this.body.push(value);\r\n    this._headPosition = value;\r\n  }\r\n\r\n  public body: Position[] = [];\r\n\r\n  public increaseSize(value: number = 1): void {\r\n    this._size = this.size + value;\r\n  }\r\n\r\n  public dead = false;\r\n\r\n  public get size(): number {\r\n    return this._size;\r\n  }\r\n\r\n  public get direction(): Keys {\r\n    return this._direction;\r\n  }\r\n\r\n  public set direction(key: Keys) {\r\n    const wrongDirection =\r\n      (this._direction === Keys.DOWN && key === Keys.UP) ||\r\n      (this._direction === Keys.UP && key === Keys.DOWN) ||\r\n      (this._direction === Keys.LEFT && key === Keys.RIGHT) ||\r\n      (this._direction === Keys.RIGHT && key === Keys.LEFT);\r\n\r\n    if (!wrongDirection) {\r\n      this._direction = key;\r\n    }\r\n  }\r\n\r\n  public nextPosition(direction: Keys): Position {\r\n    switch (direction) {\r\n      case Keys.UP:\r\n        return new Position(this.headPosition.posX, this.headPosition.posY - this._step);\r\n      case Keys.DOWN:\r\n        return new Position(this.headPosition.posX, this.headPosition.posY + this._step);\r\n      case Keys.LEFT:\r\n        return new Position(this.headPosition.posX - this._step, this.headPosition.posY);\r\n      case Keys.RIGHT:\r\n        return new Position(this.headPosition.posX + this._step, this.headPosition.posY);\r\n      default:\r\n        console.log(\"no action handler for key: \", direction);\r\n        return this.headPosition;\r\n    }\r\n  }\r\n\r\n  public checkAnotherWorm(headPosition: Position, worms: Worm[]): void {\r\n    const anotherWorm = worms.find(\r\n      x =>\r\n        !x.headPosition.positionsEqual(this.headPosition) && !x.dead && x.body.some(y => y.positionsEqual(headPosition))\r\n    );\r\n    if (anotherWorm) {\r\n      anotherWorm.dead = true;\r\n      this.increaseSize(anotherWorm.size);\r\n    }\r\n  }\r\n\r\n  constructor(\r\n    private _headPosition: Position = new Position(0, 0),\r\n    private _size: number = 3,\r\n    private _direction: Keys = Keys.DOWN,\r\n    private _step: number = 1\r\n  ) {\r\n    this.body.push(this.headPosition);\r\n  }\r\n}\r\n\r\nexport interface ISize {\r\n  width: number;\r\n  height: number;\r\n}\r\n\r\nexport class ColoredDot extends Position {\r\n  constructor(posX: number, posY: number, public color: string) {\r\n    super(posX, posY);\r\n  }\r\n}\r\n\r\nexport class Canvas {\r\n  private size: ISize = { width: 0, height: 0 };\r\n\r\n  constructor(width: number, height: number, private _blockSize: number = 1, private ctx: CanvasRenderingContext2D) {\r\n    this.size = { width, height };\r\n  }\r\n\r\n  public getRandomPosition(): Position {\r\n    return new Position(\r\n      Math.floor(Math.random() * this.canvasSizeInBlocks.width),\r\n      Math.floor(Math.random() * this.canvasSizeInBlocks.height)\r\n    );\r\n  }\r\n\r\n  public get canvasSizeInBlocks(): ISize {\r\n    return { width: this.size.width / this._blockSize, height: this.size.height / this._blockSize };\r\n  }\r\n\r\n  public outOfCanvas(position: Position): boolean {\r\n    return (\r\n      this.canvasSizeInBlocks.height < position.posY ||\r\n      position.posY < 0 ||\r\n      this.canvasSizeInBlocks.width < position.posX ||\r\n      position.posX < 0\r\n    );\r\n  }\r\n\r\n  public draw(dots: ColoredDot[]): void {\r\n    this.ctx.clearRect(0, 0, this.size.width, this.size.height);\r\n    for (let index = 0; index < dots.length; index++) {\r\n      const dot = dots[index];\r\n      this.ctx.fillStyle = dot.color;\r\n      this.ctx.fillRect(dot.posX * this._blockSize, dot.posY * this._blockSize, this._blockSize, this._blockSize);\r\n    }\r\n  }\r\n}\r\n\r\nexport class Snack extends Position {\r\n  public static newRandomly(occupiedPosition: Position[], canvas: Canvas): Snack {\r\n    let newSnackPosition = canvas.getRandomPosition();\r\n    while (occupiedPosition.some(y => y.positionsEqual(newSnackPosition))) {\r\n      newSnackPosition = canvas.getRandomPosition();\r\n    }\r\n    const { posX, posY } = newSnackPosition;\r\n    return new this(posX, posY);\r\n  }\r\n}\r\n","import { Worm, Canvas, Keys, Position, Snack, ISize, ColoredDot } from \"./Models\";\r\n\r\nexport class Game {\r\n  private intervalId?: NodeJS.Timeout;\r\n  private tick = 0;\r\n  private snacks: Snack[] = [];\r\n  private worms: Worm[] = [];\r\n  private survivorMode = false;\r\n  private canvas: Canvas;\r\n\r\n  constructor(\r\n    ctx: CanvasRenderingContext2D,\r\n    canvasSizeinPx: ISize,\r\n    private fps = 50,\r\n    private blockSize = 100,\r\n    wormsNumber = 1,\r\n    snacksNumber = 1\r\n  ) {\r\n    this.canvas = new Canvas(canvasSizeinPx.width, canvasSizeinPx.height, this.blockSize, ctx);\r\n    for (let index = 0; index < wormsNumber; index++) {\r\n      this.worms.push(new Worm(this.canvas.getRandomPosition()));\r\n    }\r\n    this.initSnacks(snacksNumber);\r\n    this.survivorMode = wormsNumber > 1;\r\n  }\r\n\r\n  private initSnacks(snacksNumber: number): void {\r\n    for (let index = 0; index < snacksNumber; index++) {\r\n      this.snacks.push(Snack.newRandomly(this.worms.flatMap(x => x.body), this.canvas));\r\n    }\r\n  }\r\n\r\n  public start(random: boolean = false): void {\r\n    this.intervalId = setInterval(() => {\r\n      this.run(random);\r\n    }, 1000 / this.fps);\r\n  }\r\n\r\n  public stop(): void {\r\n    if (this.intervalId) {\r\n      clearInterval(this.intervalId);\r\n    }\r\n  }\r\n\r\n  private run(random: boolean): void {\r\n    this.tick++;\r\n    this.worms\r\n      .filter(x => !x.dead)\r\n      .forEach(worm => {\r\n        if (random) {\r\n          const possibleDirections: number[] = [Keys.DOWN, Keys.LEFT, Keys.RIGHT, Keys.UP];\r\n          (window as any).worm = worm;\r\n          let possibleMove = false;\r\n          let key: Keys = Keys.DOWN;\r\n          do {\r\n            if (possibleDirections.length === 0) {\r\n              worm.dead = true;\r\n              possibleMove = true;\r\n            } else {\r\n              const index = Math.floor(Math.random() * possibleDirections.length);\r\n              key = possibleDirections[index];\r\n              possibleMove = this.move(worm, key);\r\n              possibleDirections.splice(index, 1);\r\n            }\r\n          } while (!possibleMove); \r\n          worm.direction = key;\r\n        }\r\n      });\r\n    this.draw();\r\n    if (this.survivorMode && this.worms.filter(x => !x.dead).length <= 1) {\r\n      this.stop();\r\n    }\r\n  }\r\n\r\n  private draw(): void {\r\n    const dots: ColoredDot[] = [];\r\n    this.worms\r\n      .filter(x => !x.dead)\r\n      .forEach(worm => {\r\n        for (let index = 0; index < worm.body.length; index++) {\r\n          const element = worm.body[index];\r\n          const color = index === worm.body.length - 1 ? \"red\" : worm.dead ? \"burlywood\" : \"black\";\r\n          dots.push(new ColoredDot(element.posX, element.posY, color));\r\n        }\r\n      });\r\n    for (let sI = 0; sI < this.snacks.length; sI++) {\r\n      const snack = this.snacks[sI];\r\n      const color = \"green\";\r\n      dots.push(new ColoredDot(snack.posX, snack.posY, color));\r\n    }\r\n    this.canvas.draw(dots);\r\n  }\r\n\r\n  private checkSnack(worm: Worm, index: number, headPosition: Position): void {\r\n    const wormApproachedSnack = this.snacks[index].positionsEqual(headPosition);\r\n    if (wormApproachedSnack) {\r\n      worm.increaseSize();\r\n      this.snacks[index] = Snack.newRandomly(this.worms.flatMap(x => x.body), this.canvas);\r\n    }\r\n  }\r\n\r\n  private move(worm: Worm, direction: Keys): boolean {\r\n    const newPosition = worm.nextPosition(direction);\r\n    const possibleMove = this.checkNextMove(newPosition, worm);\r\n    if (possibleMove) {\r\n      for (let index = 0; index < this.snacks.length; index++) {\r\n        this.checkSnack(worm, index, newPosition);\r\n      }\r\n      worm.checkAnotherWorm(newPosition, this.worms);\r\n      worm.headPosition = newPosition;\r\n      return possibleMove;\r\n    }\r\n    return possibleMove;\r\n  }\r\n\r\n  public handleKey(key: Keys): void {\r\n    if (!Object.values(Keys).includes(key)) {\r\n      return;\r\n    }\r\n    this.worms[0].direction = key;\r\n  }\r\n\r\n  private checkNextMove(headPosition: Position, worm: Worm): boolean {\r\n    if (this.canvas.outOfCanvas(headPosition)) {\r\n      return false;\r\n    }\r\n    const wormApproachedHimself = worm.body.some(x => x.positionsEqual(headPosition));\r\n    if (wormApproachedHimself) {\r\n      return false;\r\n    }\r\n    const anotherWorm = this.worms.find(\r\n      x =>\r\n        !x.headPosition.positionsEqual(worm.headPosition) && !x.dead && x.body.some(y => y.positionsEqual(headPosition))\r\n    );\r\n    if (anotherWorm) {\r\n      return anotherWorm.size <= worm.size;\r\n    }\r\n    return true;\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { Game } from \"./Game\";\r\nimport { ISize } from \"./Models\";\r\n\r\ninterface GameShellProps {\r\n  canvasSize: ISize;\r\n}\r\n\r\nexport default class GameShell extends React.Component<\r\n  GameShellProps,\r\n  { tick: number }\r\n> {\r\n  private canvasRef: React.RefObject<HTMLCanvasElement>;\r\n\r\n  constructor(props: GameShellProps) {\r\n    super(props);\r\n    this.canvasRef = React.createRef();\r\n\r\n    this.state = {\r\n      tick: 0\r\n    };\r\n  }\r\n\r\n  componentDidMount(): void {\r\n    const canvas = this.canvasRef.current as HTMLCanvasElement;\r\n    const ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\r\n    ctx.fillStyle = \"green\";\r\n    const game = new Game(ctx, this.props.canvasSize, 50, 3, 100, 100);\r\n    game.start(true);\r\n    window.addEventListener(\"keydown\", (event: KeyboardEvent) =>\r\n      game.handleKey(event.keyCode)\r\n    );\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    return (\r\n      <canvas\r\n        ref={this.canvasRef}\r\n        width={this.props.canvasSize.width}\r\n        height={this.props.canvasSize.height}\r\n        style={{ border: \"1px solid\" }}\r\n      />\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport GameShell from './components/GameShell/GameShell';\n\nconst App: React.FC = () => {\n  const canvasWidth = window.innerWidth - 10;\n  const canvasHeight = window.innerHeight - 10;\n  return (\n    <div className=\"App\">\n        <GameShell canvasSize={{ width: canvasWidth, height: canvasHeight }}></GameShell>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}